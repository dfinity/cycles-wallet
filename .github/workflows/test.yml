name: test
on:
  push:
    branches:
    - main
  pull_request:

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      filter: ${{ steps.filter.outputs.backend == 'true' || steps.filter.outputs.workflows == 'true' }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with: 
        filters: .github/filters.yml
  test:
    name: Run built-in tests
    needs: filter
    if: ${{ needs.filter.outputs.filter == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: ['1.66.1']
        node-version: ['12.x']
    steps:
    - uses: actions/checkout@v1
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ./target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Install Rust
      run: |
        rustup update ${{ matrix.rust }}
        rustup default ${{ matrix.rust }}
    - name: Install DFINITY SDK
      run: |
        DFX_VERSION=0.12.1
        pushd /tmp
        wget -q https://sdk.dfinity.org/install.sh
        echo Y | DFX_VERSION=$DFX_VERSION bash install.sh
        echo $HOME/bin >> $GITHUB_PATH
        rm install.sh
        popd
    - name: Install Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Run tests
      run: |
        dfx start --background
        dfx canister create wallet
        dfx build wallet
        cargo test --verbose --no-fail-fast --workspace --all-targets --locked -- --nocapture
      env:
        RUST_BACKTRACE: 1

  aggregate:
    name: test:required
    needs: [test, filter]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
    - name: Check test result
      if: ${{ needs.test.result != 'success' && needs.filter.outputs.filter == 'true' }}
      run: exit 1
    