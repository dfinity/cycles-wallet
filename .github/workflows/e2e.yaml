name: build
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest ]
        rust: [ '1.52.1' ]
        dfx: [ '0.7.2', '0.8.0' ] # only >= 0.8.1 makes sense
    env:
      DFX_VERSION: ${{ matrix.dfx }}

    steps:
      - uses: actions/checkout@v1
      - name: Cache Cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.rust }}-1
      - name: Install Rust
        run: |
          rustup update ${{ matrix.rust }} --no-self-update
          rustup default ${{ matrix.rust }}
          rustup target add wasm32-unknown-unknown
          rustup component add rustfmt
      - name: Provision Darwin
        if: matrix.os == 'macos-latest'
        run: bash .github/workflows/provision-darwin.sh
      - name: Provision Linux
        if: matrix.os == 'ubuntu-latest'
        run: bash .github/workflows/provision-linux.sh

      - name: Build
        run: |
          dfx start --background
          dfx canister create wallet
          dfx build wallet
          dfx stop

      - name: Run e2e tests
        # but note, dfx doesn't yet use the built wasm.
        run: |
          export DFX_WALLET_WASM=$GITHUB_WORKSPACE/wallet/target/wasm32-unknown-unknown/release/wallet-opt.wasm
          export
          bats e2e/bash/*.bash
